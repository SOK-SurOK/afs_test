Была выбрана СУБД sqlite3, так как она идеально подходит для "pet project",
test_db.sqlite3 - файл БД.
Я попытался максимально `переносимый` SQL использовать, но все равно
все СУБД sql имеют свои `особенности`

Сначала я попытался решить задачу в лоб, но быстро понял, что лучше разделить ее.
Итоговый файл sql = table.sql ; остальные файлы - промежуточные.
Промежуточные (как можно догадаться по названию) - вычисляют отдельные поля таблицы.

Исключения из правила: в column_TOP3_most_popular_ps.sql содержиться вариант без использования WITH (громоздко);
в column_TOP3_most_popular_ps2.sql уже использовавшийся при формировании table.sql ;
в column_max_amount_for_1_user_ALT.sql содержиться альтернативный вариант поля, так как я
не совсем понял суть изначального - если мы группируем по проектам, то это поле необходимо 
группировать по nick, плюсом ко всему вроде должно быть ограничение, что дважды нельзя купить игру, но
я попытался в table.sql сделать максимально похожее, что просили, а вот в этом файле я предоставил
как лучше было бы представить это поле.

На счет таблицы card_bank тоже не совсем разобрал - как я понял у нее идет отношение с 
payments как 1:1, но я бы лучше сделал дополнительное поле в payments и сделал на него FOREIGN KEY из card_bank.id

Ну и вообще лучше наверное не по проектам мерить, а по клиентам (как изменяется клиент);
ну  если был слив данных, то скорее всего надо проверять всплеск покупок по конкретному банку
